syntax = "proto3";

option go_package = "n0st.ac/n0stack/infra/v1alpha;pinfra";

package n0stack.infra.v1alpha;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "n0stack/protobuf/operation.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "n0stack";
    contact: {
      name: "n0stack";
      url: "https://github.com/n0stack/n0stack";
    };
  };
  
  schemes: HTTPS;
  // schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};


message NetworkInterface {
  string name = 1;

  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  // Network の中でユニークであること
  string hardware_address = 32;

  // Network の CIDR に含まれていること
  string ipv4_address = 33;
  string ipv6_address = 34;
}
message Network {
  // Name is a unique field.
  string name = 1;
  string project = 2;

  // The annotations parameter can store metadata used by the n0stack system.
  // The n0stack operations may modify this defined by the user without any notice.
  // In particular, this targets domain specific parameters, which cannot be used by many users.
  map<string, string> annotations = 3;

  // Labels stores user-defined metadata.
  // The n0stack system must not rewrite this value.
  map<string, string> labels = 4;


  enum NetworkState {
    // falied state because failed some process on API.
    NETWORK_UNSPECIFIED = 0;

    // steady state
    AVAILABLE = 1;

    // standard unsteady state
    CREATING = 16;
    DELETING = 17;

    RESERVING_NETWORK_INTERFACE = 32;
    RELEASING_NETWORK_INTERFACE = 33;
  }
  NetworkState state = 5;

  string ipv4_cidr = 32;
  string ipv6_cidr = 33;

  repeated NetworkInterface network_interfaces = 34;
}


service NetworkService {
  rpc CreateNetwork(CreateNetworkRequest) returns (Network) {
    option (google.api.http) = {
      post: "/api/infra/v1alpha/projects/{network.project}/networks"
      body: "network"
    };
  }

  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse) {
    option (google.api.http) = {
      get: "/api/infra/v1alpha/projects/{project}/networks"
    };
  }

  rpc GetNetwork(GetNetworkRequest) returns (Network) {
    option (google.api.http) = {
      get: "/api/infra/v1alpha/projects/{project}/networks/{name}"
    };
  }

  rpc UpdateNetwork(UpdateNetworkRequest) returns (Network) {
    option (google.api.http) = {
      patch: "/api/infra/v1alpha/projects/{network.project}/networks/{network.name}"
      body: "network"
    };
  }

  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/infra/v1alpha/projects/{project}/networks/{name}"
    };
  }

  rpc CancelNetworkOperation(CancelNetworkOperationRequest) returns (Network) {
    option (google.api.http) = {
      post: "/api/infra/v1alpha/projects/{project}/networks/{name}:cancel"
      body: "*"
    };
  }

  rpc ProposeNetworkOperation(n0stack.protobuf.ProposeOperationRequest) returns (Network) {}

  rpc ReserveNetworkInterface(ReserveNetworkInterfaceRequest) returns (Network) {}
  rpc ReleaseNetworkInterface(ReleaseNetworkInterfaceRequest) returns (Network) {}
}


message CreateNetworkRequest {
  Network network = 1;
}

message ListNetworksRequest {
  string project = 1;
}
message ListNetworksResponse{
  repeated Network networks = 1;
}

message GetNetworkRequest {
  string name = 1;
  string project = 2;
}

message UpdateNetworkRequest {
  Network network = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteNetworkRequest {
  string name = 1;
  string project = 2;
}

message CancelNetworkOperationRequest {
  string name = 1;
  string project = 2;
}

message ReserveNetworkInterfaceRequest {
  string network_name = 1;
  string project = 2;

  NetworkInterface network_interface = 3;
}

message ReleaseNetworkInterfaceRequest {
  string network_name = 1;
  string project = 2;

  string network_interface_name = 3;
}
