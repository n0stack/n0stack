// Code generated by protoc-gen-go. DO NOT EDIT.
// source: n0stack/infra/v1alpha/virtual_machine.proto

package pinfra

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	protobuf "n0st.ac/n0stack/protobuf"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VirtualMachine_VirtualMachineState int32

const (
	VirtualMachine_VIRTUAL_MACHINE_UNSPECIFIED VirtualMachine_VirtualMachineState = 0
	// steady state
	VirtualMachine_AVAILABLE VirtualMachine_VirtualMachineState = 1
	VirtualMachine_DELETED   VirtualMachine_VirtualMachineState = 2
	// standard unsteady state
	VirtualMachine_CREATING  VirtualMachine_VirtualMachineState = 16
	VirtualMachine_DELETING  VirtualMachine_VirtualMachineState = 17
	VirtualMachine_BOOTING   VirtualMachine_VirtualMachineState = 32
	VirtualMachine_REBOOTING VirtualMachine_VirtualMachineState = 33
	VirtualMachine_STOPPING  VirtualMachine_VirtualMachineState = 34
)

var VirtualMachine_VirtualMachineState_name = map[int32]string{
	0:  "VIRTUAL_MACHINE_UNSPECIFIED",
	1:  "AVAILABLE",
	2:  "DELETED",
	16: "CREATING",
	17: "DELETING",
	32: "BOOTING",
	33: "REBOOTING",
	34: "STOPPING",
}

var VirtualMachine_VirtualMachineState_value = map[string]int32{
	"VIRTUAL_MACHINE_UNSPECIFIED": 0,
	"AVAILABLE":                   1,
	"DELETED":                     2,
	"CREATING":                    16,
	"DELETING":                    17,
	"BOOTING":                     32,
	"REBOOTING":                   33,
	"STOPPING":                    34,
}

func (x VirtualMachine_VirtualMachineState) String() string {
	return proto.EnumName(VirtualMachine_VirtualMachineState_name, int32(x))
}

func (VirtualMachine_VirtualMachineState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{0, 0}
}

type VirtualMachine struct {
	// Name is a unique field.
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The annotations parameter can store metadata used by the n0stack system.
	// The n0stack operations may modify this defined by the user without any notice.
	// In particular, this targets domain specific parameters, which cannot be used by many users.
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels stores user-defined metadata.
	// The n0stack system must not rewrite this value.
	Labels               map[string]string                   `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Operation            *protobuf.Operation                 `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
	State                VirtualMachine_VirtualMachineState  `protobuf:"varint,5,opt,name=state,proto3,enum=n0stack.infra.v1alpha.VirtualMachine_VirtualMachineState" json:"state,omitempty"`
	Uuid                 string                              `protobuf:"bytes,32,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CpuCore              uint32                              `protobuf:"varint,33,opt,name=cpu_core,json=cpuCore,proto3" json:"cpu_core,omitempty"`
	MemoryBytes          uint64                              `protobuf:"varint,34,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	BlockStorageNames    []string                            `protobuf:"bytes,35,rep,name=block_storage_names,json=blockStorageNames,proto3" json:"block_storage_names,omitempty"`
	Nics                 []*VirtualMachine_VirtualMachineNIC `protobuf:"bytes,36,rep,name=nics,proto3" json:"nics,omitempty"`
	IsRunning            bool                                `protobuf:"varint,37,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	AuthorizedUserNames  []string                            `protobuf:"bytes,38,rep,name=authorized_user_names,json=authorizedUserNames,proto3" json:"authorized_user_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VirtualMachine) Reset()         { *m = VirtualMachine{} }
func (m *VirtualMachine) String() string { return proto.CompactTextString(m) }
func (*VirtualMachine) ProtoMessage()    {}
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{0}
}

func (m *VirtualMachine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachine.Unmarshal(m, b)
}
func (m *VirtualMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachine.Marshal(b, m, deterministic)
}
func (m *VirtualMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachine.Merge(m, src)
}
func (m *VirtualMachine) XXX_Size() int {
	return xxx_messageInfo_VirtualMachine.Size(m)
}
func (m *VirtualMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachine.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachine proto.InternalMessageInfo

func (m *VirtualMachine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualMachine) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *VirtualMachine) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualMachine) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *VirtualMachine) GetOperation() *protobuf.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *VirtualMachine) GetState() VirtualMachine_VirtualMachineState {
	if m != nil {
		return m.State
	}
	return VirtualMachine_VIRTUAL_MACHINE_UNSPECIFIED
}

func (m *VirtualMachine) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *VirtualMachine) GetCpuCore() uint32 {
	if m != nil {
		return m.CpuCore
	}
	return 0
}

func (m *VirtualMachine) GetMemoryBytes() uint64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

func (m *VirtualMachine) GetBlockStorageNames() []string {
	if m != nil {
		return m.BlockStorageNames
	}
	return nil
}

func (m *VirtualMachine) GetNics() []*VirtualMachine_VirtualMachineNIC {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *VirtualMachine) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func (m *VirtualMachine) GetAuthorizedUserNames() []string {
	if m != nil {
		return m.AuthorizedUserNames
	}
	return nil
}

type VirtualMachine_VirtualMachineNIC struct {
	NetworkName          string   `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	NetworkInterfaceName string   `protobuf:"bytes,2,opt,name=network_interface_name,json=networkInterfaceName,proto3" json:"network_interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualMachine_VirtualMachineNIC) Reset()         { *m = VirtualMachine_VirtualMachineNIC{} }
func (m *VirtualMachine_VirtualMachineNIC) String() string { return proto.CompactTextString(m) }
func (*VirtualMachine_VirtualMachineNIC) ProtoMessage()    {}
func (*VirtualMachine_VirtualMachineNIC) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{0, 2}
}

func (m *VirtualMachine_VirtualMachineNIC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachine_VirtualMachineNIC.Unmarshal(m, b)
}
func (m *VirtualMachine_VirtualMachineNIC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachine_VirtualMachineNIC.Marshal(b, m, deterministic)
}
func (m *VirtualMachine_VirtualMachineNIC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachine_VirtualMachineNIC.Merge(m, src)
}
func (m *VirtualMachine_VirtualMachineNIC) XXX_Size() int {
	return xxx_messageInfo_VirtualMachine_VirtualMachineNIC.Size(m)
}
func (m *VirtualMachine_VirtualMachineNIC) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachine_VirtualMachineNIC.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachine_VirtualMachineNIC proto.InternalMessageInfo

func (m *VirtualMachine_VirtualMachineNIC) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *VirtualMachine_VirtualMachineNIC) GetNetworkInterfaceName() string {
	if m != nil {
		return m.NetworkInterfaceName
	}
	return ""
}

type CreateVirtualMachineRequest struct {
	VirtualMachine       *VirtualMachine `protobuf:"bytes,1,opt,name=virtual_machine,json=virtualMachine,proto3" json:"virtual_machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateVirtualMachineRequest) Reset()         { *m = CreateVirtualMachineRequest{} }
func (m *CreateVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVirtualMachineRequest) ProtoMessage()    {}
func (*CreateVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{1}
}

func (m *CreateVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVirtualMachineRequest.Unmarshal(m, b)
}
func (m *CreateVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *CreateVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVirtualMachineRequest.Merge(m, src)
}
func (m *CreateVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVirtualMachineRequest.Size(m)
}
func (m *CreateVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVirtualMachineRequest proto.InternalMessageInfo

func (m *CreateVirtualMachineRequest) GetVirtualMachine() *VirtualMachine {
	if m != nil {
		return m.VirtualMachine
	}
	return nil
}

type ListVirtualMachinesRequest struct {
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVirtualMachinesRequest) Reset()         { *m = ListVirtualMachinesRequest{} }
func (m *ListVirtualMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*ListVirtualMachinesRequest) ProtoMessage()    {}
func (*ListVirtualMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{2}
}

func (m *ListVirtualMachinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVirtualMachinesRequest.Unmarshal(m, b)
}
func (m *ListVirtualMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVirtualMachinesRequest.Marshal(b, m, deterministic)
}
func (m *ListVirtualMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVirtualMachinesRequest.Merge(m, src)
}
func (m *ListVirtualMachinesRequest) XXX_Size() int {
	return xxx_messageInfo_ListVirtualMachinesRequest.Size(m)
}
func (m *ListVirtualMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVirtualMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVirtualMachinesRequest proto.InternalMessageInfo

func (m *ListVirtualMachinesRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type ListVirtualMachinesResponse struct {
	VirtualMachines      []*VirtualMachine `protobuf:"bytes,1,rep,name=virtual_machines,json=virtualMachines,proto3" json:"virtual_machines,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListVirtualMachinesResponse) Reset()         { *m = ListVirtualMachinesResponse{} }
func (m *ListVirtualMachinesResponse) String() string { return proto.CompactTextString(m) }
func (*ListVirtualMachinesResponse) ProtoMessage()    {}
func (*ListVirtualMachinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{3}
}

func (m *ListVirtualMachinesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVirtualMachinesResponse.Unmarshal(m, b)
}
func (m *ListVirtualMachinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVirtualMachinesResponse.Marshal(b, m, deterministic)
}
func (m *ListVirtualMachinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVirtualMachinesResponse.Merge(m, src)
}
func (m *ListVirtualMachinesResponse) XXX_Size() int {
	return xxx_messageInfo_ListVirtualMachinesResponse.Size(m)
}
func (m *ListVirtualMachinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVirtualMachinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVirtualMachinesResponse proto.InternalMessageInfo

func (m *ListVirtualMachinesResponse) GetVirtualMachines() []*VirtualMachine {
	if m != nil {
		return m.VirtualMachines
	}
	return nil
}

type GetVirtualMachineRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVirtualMachineRequest) Reset()         { *m = GetVirtualMachineRequest{} }
func (m *GetVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*GetVirtualMachineRequest) ProtoMessage()    {}
func (*GetVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{4}
}

func (m *GetVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVirtualMachineRequest.Unmarshal(m, b)
}
func (m *GetVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *GetVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVirtualMachineRequest.Merge(m, src)
}
func (m *GetVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_GetVirtualMachineRequest.Size(m)
}
func (m *GetVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVirtualMachineRequest proto.InternalMessageInfo

func (m *GetVirtualMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetVirtualMachineRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type UpdateVirtualMachineRequest struct {
	VirtualMachine       *VirtualMachine       `protobuf:"bytes,1,opt,name=virtual_machine,json=virtualMachine,proto3" json:"virtual_machine,omitempty"`
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateVirtualMachineRequest) Reset()         { *m = UpdateVirtualMachineRequest{} }
func (m *UpdateVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateVirtualMachineRequest) ProtoMessage()    {}
func (*UpdateVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{5}
}

func (m *UpdateVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateVirtualMachineRequest.Unmarshal(m, b)
}
func (m *UpdateVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *UpdateVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateVirtualMachineRequest.Merge(m, src)
}
func (m *UpdateVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateVirtualMachineRequest.Size(m)
}
func (m *UpdateVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateVirtualMachineRequest proto.InternalMessageInfo

func (m *UpdateVirtualMachineRequest) GetVirtualMachine() *VirtualMachine {
	if m != nil {
		return m.VirtualMachine
	}
	return nil
}

func (m *UpdateVirtualMachineRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type DeleteVirtualMachineRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVirtualMachineRequest) Reset()         { *m = DeleteVirtualMachineRequest{} }
func (m *DeleteVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVirtualMachineRequest) ProtoMessage()    {}
func (*DeleteVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{6}
}

func (m *DeleteVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVirtualMachineRequest.Unmarshal(m, b)
}
func (m *DeleteVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVirtualMachineRequest.Merge(m, src)
}
func (m *DeleteVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVirtualMachineRequest.Size(m)
}
func (m *DeleteVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVirtualMachineRequest proto.InternalMessageInfo

func (m *DeleteVirtualMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteVirtualMachineRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type BootVirtualMachineRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BootVirtualMachineRequest) Reset()         { *m = BootVirtualMachineRequest{} }
func (m *BootVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*BootVirtualMachineRequest) ProtoMessage()    {}
func (*BootVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{7}
}

func (m *BootVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BootVirtualMachineRequest.Unmarshal(m, b)
}
func (m *BootVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BootVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *BootVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootVirtualMachineRequest.Merge(m, src)
}
func (m *BootVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_BootVirtualMachineRequest.Size(m)
}
func (m *BootVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootVirtualMachineRequest proto.InternalMessageInfo

func (m *BootVirtualMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BootVirtualMachineRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type RebootVirtualMachineRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Hard                 bool     `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebootVirtualMachineRequest) Reset()         { *m = RebootVirtualMachineRequest{} }
func (m *RebootVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*RebootVirtualMachineRequest) ProtoMessage()    {}
func (*RebootVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{8}
}

func (m *RebootVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebootVirtualMachineRequest.Unmarshal(m, b)
}
func (m *RebootVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebootVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *RebootVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebootVirtualMachineRequest.Merge(m, src)
}
func (m *RebootVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_RebootVirtualMachineRequest.Size(m)
}
func (m *RebootVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RebootVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RebootVirtualMachineRequest proto.InternalMessageInfo

func (m *RebootVirtualMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RebootVirtualMachineRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *RebootVirtualMachineRequest) GetHard() bool {
	if m != nil {
		return m.Hard
	}
	return false
}

type ShutdownVirtualMachineRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Hard                 bool     `protobuf:"varint,3,opt,name=hard,proto3" json:"hard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutdownVirtualMachineRequest) Reset()         { *m = ShutdownVirtualMachineRequest{} }
func (m *ShutdownVirtualMachineRequest) String() string { return proto.CompactTextString(m) }
func (*ShutdownVirtualMachineRequest) ProtoMessage()    {}
func (*ShutdownVirtualMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{9}
}

func (m *ShutdownVirtualMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutdownVirtualMachineRequest.Unmarshal(m, b)
}
func (m *ShutdownVirtualMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutdownVirtualMachineRequest.Marshal(b, m, deterministic)
}
func (m *ShutdownVirtualMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutdownVirtualMachineRequest.Merge(m, src)
}
func (m *ShutdownVirtualMachineRequest) XXX_Size() int {
	return xxx_messageInfo_ShutdownVirtualMachineRequest.Size(m)
}
func (m *ShutdownVirtualMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutdownVirtualMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutdownVirtualMachineRequest proto.InternalMessageInfo

func (m *ShutdownVirtualMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShutdownVirtualMachineRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ShutdownVirtualMachineRequest) GetHard() bool {
	if m != nil {
		return m.Hard
	}
	return false
}

type OpenConsoleRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenConsoleRequest) Reset()         { *m = OpenConsoleRequest{} }
func (m *OpenConsoleRequest) String() string { return proto.CompactTextString(m) }
func (*OpenConsoleRequest) ProtoMessage()    {}
func (*OpenConsoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{10}
}

func (m *OpenConsoleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenConsoleRequest.Unmarshal(m, b)
}
func (m *OpenConsoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenConsoleRequest.Marshal(b, m, deterministic)
}
func (m *OpenConsoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenConsoleRequest.Merge(m, src)
}
func (m *OpenConsoleRequest) XXX_Size() int {
	return xxx_messageInfo_OpenConsoleRequest.Size(m)
}
func (m *OpenConsoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenConsoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenConsoleRequest proto.InternalMessageInfo

func (m *OpenConsoleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenConsoleRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type OpenConsoleResponse struct {
	ConsoleUrl           string   `protobuf:"bytes,1,opt,name=console_url,json=consoleUrl,proto3" json:"console_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenConsoleResponse) Reset()         { *m = OpenConsoleResponse{} }
func (m *OpenConsoleResponse) String() string { return proto.CompactTextString(m) }
func (*OpenConsoleResponse) ProtoMessage()    {}
func (*OpenConsoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{11}
}

func (m *OpenConsoleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenConsoleResponse.Unmarshal(m, b)
}
func (m *OpenConsoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenConsoleResponse.Marshal(b, m, deterministic)
}
func (m *OpenConsoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenConsoleResponse.Merge(m, src)
}
func (m *OpenConsoleResponse) XXX_Size() int {
	return xxx_messageInfo_OpenConsoleResponse.Size(m)
}
func (m *OpenConsoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenConsoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenConsoleResponse proto.InternalMessageInfo

func (m *OpenConsoleResponse) GetConsoleUrl() string {
	if m != nil {
		return m.ConsoleUrl
	}
	return ""
}

type CancelVirtualMachineOperationRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelVirtualMachineOperationRequest) Reset()         { *m = CancelVirtualMachineOperationRequest{} }
func (m *CancelVirtualMachineOperationRequest) String() string { return proto.CompactTextString(m) }
func (*CancelVirtualMachineOperationRequest) ProtoMessage()    {}
func (*CancelVirtualMachineOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{12}
}

func (m *CancelVirtualMachineOperationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelVirtualMachineOperationRequest.Unmarshal(m, b)
}
func (m *CancelVirtualMachineOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelVirtualMachineOperationRequest.Marshal(b, m, deterministic)
}
func (m *CancelVirtualMachineOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelVirtualMachineOperationRequest.Merge(m, src)
}
func (m *CancelVirtualMachineOperationRequest) XXX_Size() int {
	return xxx_messageInfo_CancelVirtualMachineOperationRequest.Size(m)
}
func (m *CancelVirtualMachineOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelVirtualMachineOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelVirtualMachineOperationRequest proto.InternalMessageInfo

func (m *CancelVirtualMachineOperationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelVirtualMachineOperationRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type ChangeVirtualMachineRunningStateRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	IsRunning            bool     `protobuf:"varint,3,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeVirtualMachineRunningStateRequest) Reset() {
	*m = ChangeVirtualMachineRunningStateRequest{}
}
func (m *ChangeVirtualMachineRunningStateRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeVirtualMachineRunningStateRequest) ProtoMessage()    {}
func (*ChangeVirtualMachineRunningStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c1b42a64a24bb97, []int{13}
}

func (m *ChangeVirtualMachineRunningStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeVirtualMachineRunningStateRequest.Unmarshal(m, b)
}
func (m *ChangeVirtualMachineRunningStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeVirtualMachineRunningStateRequest.Marshal(b, m, deterministic)
}
func (m *ChangeVirtualMachineRunningStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeVirtualMachineRunningStateRequest.Merge(m, src)
}
func (m *ChangeVirtualMachineRunningStateRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeVirtualMachineRunningStateRequest.Size(m)
}
func (m *ChangeVirtualMachineRunningStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeVirtualMachineRunningStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeVirtualMachineRunningStateRequest proto.InternalMessageInfo

func (m *ChangeVirtualMachineRunningStateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChangeVirtualMachineRunningStateRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ChangeVirtualMachineRunningStateRequest) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func init() {
	proto.RegisterEnum("n0stack.infra.v1alpha.VirtualMachine_VirtualMachineState", VirtualMachine_VirtualMachineState_name, VirtualMachine_VirtualMachineState_value)
	proto.RegisterType((*VirtualMachine)(nil), "n0stack.infra.v1alpha.VirtualMachine")
	proto.RegisterMapType((map[string]string)(nil), "n0stack.infra.v1alpha.VirtualMachine.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "n0stack.infra.v1alpha.VirtualMachine.LabelsEntry")
	proto.RegisterType((*VirtualMachine_VirtualMachineNIC)(nil), "n0stack.infra.v1alpha.VirtualMachine.VirtualMachineNIC")
	proto.RegisterType((*CreateVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.CreateVirtualMachineRequest")
	proto.RegisterType((*ListVirtualMachinesRequest)(nil), "n0stack.infra.v1alpha.ListVirtualMachinesRequest")
	proto.RegisterType((*ListVirtualMachinesResponse)(nil), "n0stack.infra.v1alpha.ListVirtualMachinesResponse")
	proto.RegisterType((*GetVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.GetVirtualMachineRequest")
	proto.RegisterType((*UpdateVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.UpdateVirtualMachineRequest")
	proto.RegisterType((*DeleteVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.DeleteVirtualMachineRequest")
	proto.RegisterType((*BootVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.BootVirtualMachineRequest")
	proto.RegisterType((*RebootVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.RebootVirtualMachineRequest")
	proto.RegisterType((*ShutdownVirtualMachineRequest)(nil), "n0stack.infra.v1alpha.ShutdownVirtualMachineRequest")
	proto.RegisterType((*OpenConsoleRequest)(nil), "n0stack.infra.v1alpha.OpenConsoleRequest")
	proto.RegisterType((*OpenConsoleResponse)(nil), "n0stack.infra.v1alpha.OpenConsoleResponse")
	proto.RegisterType((*CancelVirtualMachineOperationRequest)(nil), "n0stack.infra.v1alpha.CancelVirtualMachineOperationRequest")
	proto.RegisterType((*ChangeVirtualMachineRunningStateRequest)(nil), "n0stack.infra.v1alpha.ChangeVirtualMachineRunningStateRequest")
}

func init() {
	proto.RegisterFile("n0stack/infra/v1alpha/virtual_machine.proto", fileDescriptor_4c1b42a64a24bb97)
}

var fileDescriptor_4c1b42a64a24bb97 = []byte{
	// 1374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xee, 0x24, 0x69, 0x93, 0x1c, 0xf7, 0xc3, 0x99, 0xa4, 0xd5, 0xd6, 0x7e, 0xfb, 0xd6, 0x5d,
	0x5a, 0x70, 0x03, 0xf5, 0xb6, 0xa6, 0x0a, 0x6d, 0x2a, 0x8a, 0x6c, 0xc7, 0x6d, 0xad, 0x26, 0x71,
	0xd8, 0x24, 0x15, 0x20, 0xa1, 0xd5, 0x78, 0x33, 0xb1, 0xb7, 0x59, 0xef, 0x2c, 0x3b, 0xbb, 0xae,
	0x42, 0xd5, 0x1b, 0x2e, 0xe1, 0x0e, 0x84, 0xc4, 0x5f, 0x80, 0x4b, 0xae, 0x7b, 0x03, 0x57, 0x5c,
	0x03, 0x3f, 0x01, 0x21, 0xf1, 0x2f, 0xd0, 0xcc, 0xae, 0x93, 0xf8, 0x63, 0xdd, 0x4d, 0x52, 0x7a,
	0x95, 0x99, 0x39, 0x67, 0xce, 0x3c, 0xcf, 0x99, 0xb3, 0xe7, 0x99, 0x18, 0xde, 0x75, 0x6e, 0x72,
	0x9f, 0x98, 0x3b, 0x9a, 0xe5, 0x6c, 0x7b, 0x44, 0xeb, 0xdc, 0x22, 0xb6, 0xdb, 0x22, 0x5a, 0xc7,
	0xf2, 0xfc, 0x80, 0xd8, 0x46, 0x9b, 0x98, 0x2d, 0xcb, 0xa1, 0x05, 0xd7, 0x63, 0x3e, 0xc3, 0xe7,
	0x23, 0xe7, 0x82, 0x74, 0x2e, 0x44, 0xce, 0x99, 0xff, 0x35, 0x19, 0x6b, 0xda, 0x54, 0x23, 0xae,
	0xa5, 0x11, 0xc7, 0x61, 0x3e, 0xf1, 0x2d, 0xe6, 0xf0, 0x70, 0x53, 0x26, 0x1b, 0x59, 0xe5, 0xac,
	0x11, 0x6c, 0x6b, 0xb4, 0xed, 0xfa, 0xbb, 0x91, 0x31, 0xd7, 0x6f, 0xdc, 0xb6, 0xa8, 0xbd, 0x65,
	0xb4, 0x09, 0xdf, 0x89, 0x3c, 0xde, 0x93, 0x7f, 0xcc, 0x1b, 0x4d, 0xea, 0xdc, 0xe0, 0xcf, 0x48,
	0xb3, 0x49, 0x3d, 0x8d, 0xb9, 0xf2, 0x80, 0x21, 0x87, 0xe5, 0xba, 0x74, 0xf6, 0x02, 0x32, 0x97,
	0x7a, 0xd2, 0x25, 0xf4, 0x50, 0xbf, 0x9f, 0x82, 0xb3, 0x4f, 0x42, 0x76, 0x2b, 0x21, 0x39, 0x8c,
	0x61, 0xc2, 0x21, 0x6d, 0xaa, 0xa0, 0x1c, 0xca, 0x4f, 0xeb, 0x72, 0x8c, 0x15, 0x98, 0x74, 0x3d,
	0xf6, 0x94, 0x9a, 0xbe, 0x32, 0x26, 0x97, 0xbb, 0x53, 0xfc, 0x09, 0xa4, 0x0e, 0x9c, 0xab, 0x8c,
	0xe7, 0xc6, 0xf3, 0xa9, 0xe2, 0x42, 0x61, 0x68, 0x6a, 0x0a, 0xbd, 0x27, 0x15, 0x4a, 0xfb, 0x1b,
	0xab, 0x8e, 0xef, 0xed, 0xea, 0x07, 0x43, 0xe1, 0x1a, 0x9c, 0xb2, 0x49, 0x83, 0xda, 0x5c, 0x99,
	0x90, 0x41, 0x6f, 0x25, 0x0b, 0xba, 0x2c, 0xf7, 0x84, 0xf1, 0xa2, 0x00, 0xf8, 0x2e, 0x4c, 0xef,
	0x11, 0x57, 0x4e, 0xe5, 0x50, 0x3e, 0x55, 0xcc, 0xee, 0x45, 0xeb, 0xe6, 0xa6, 0x50, 0xef, 0xba,
	0xe8, 0xfb, 0xde, 0xb8, 0x0e, 0x27, 0xb9, 0x4f, 0x7c, 0xaa, 0x9c, 0xcc, 0xa1, 0xfc, 0xd9, 0xe2,
	0xdd, 0x64, 0x20, 0x7a, 0xa7, 0xeb, 0x22, 0x80, 0x1e, 0xc6, 0x11, 0xe9, 0x0d, 0x02, 0x6b, 0x4b,
	0xc9, 0x85, 0xe9, 0x15, 0x63, 0x7c, 0x11, 0xa6, 0x4c, 0x37, 0x30, 0x4c, 0xe6, 0x51, 0xe5, 0x4a,
	0x0e, 0xe5, 0xcf, 0xe8, 0x93, 0xa6, 0x1b, 0x54, 0x98, 0x47, 0xf1, 0x15, 0x38, 0xdd, 0xa6, 0x6d,
	0xe6, 0xed, 0x1a, 0x8d, 0x5d, 0x9f, 0x72, 0x45, 0xcd, 0xa1, 0xfc, 0x84, 0x9e, 0x0a, 0xd7, 0xca,
	0x62, 0x09, 0x17, 0x60, 0xb6, 0x61, 0x33, 0x73, 0xc7, 0xe0, 0x3e, 0xf3, 0x48, 0x93, 0x1a, 0xe2,
	0xca, 0xb8, 0xf2, 0x56, 0x6e, 0x3c, 0x3f, 0xad, 0xcf, 0x48, 0xd3, 0x7a, 0x68, 0x59, 0x15, 0x06,
	0xfc, 0x18, 0x26, 0x1c, 0xcb, 0xe4, 0xca, 0x55, 0x99, 0xd6, 0x0f, 0x8e, 0xc2, 0x68, 0xb5, 0x56,
	0xd1, 0x65, 0x10, 0x7c, 0x09, 0xc0, 0xe2, 0x86, 0x17, 0x38, 0x8e, 0xe5, 0x34, 0x95, 0x6b, 0x39,
	0x94, 0x9f, 0xd2, 0xa7, 0x2d, 0xae, 0x87, 0x0b, 0xb8, 0x08, 0xe7, 0x49, 0xe0, 0xb7, 0x98, 0x67,
	0x7d, 0x49, 0xb7, 0x8c, 0x80, 0x53, 0x2f, 0x42, 0xf7, 0xb6, 0x44, 0x37, 0xbb, 0x6f, 0xdc, 0xe4,
	0xd4, 0x93, 0xf8, 0x32, 0xf7, 0x21, 0xdd, 0x5f, 0x19, 0x38, 0x0d, 0xe3, 0x3b, 0x74, 0x37, 0xaa,
	0x49, 0x31, 0xc4, 0x73, 0x70, 0xb2, 0x43, 0xec, 0x80, 0x46, 0x05, 0x19, 0x4e, 0x16, 0xc7, 0xee,
	0xa0, 0xcc, 0x5d, 0x48, 0x1d, 0x28, 0x82, 0x43, 0x6d, 0xb5, 0x61, 0x66, 0x80, 0xa8, 0xb8, 0x02,
	0x87, 0xfa, 0xcf, 0x98, 0xb7, 0x63, 0x1c, 0xf8, 0x30, 0x52, 0xd1, 0x9a, 0xc0, 0x8c, 0x6f, 0xc3,
	0x85, 0xae, 0x8b, 0xe5, 0xf8, 0xd4, 0xdb, 0x26, 0x66, 0x78, 0x0d, 0xd1, 0x11, 0x73, 0x91, 0xb5,
	0xd6, 0x35, 0x8a, 0x5d, 0xea, 0x0f, 0x08, 0x66, 0x87, 0x54, 0x0a, 0xbe, 0x0c, 0xd9, 0x27, 0x35,
	0x7d, 0x63, 0xb3, 0xb4, 0x6c, 0xac, 0x94, 0x2a, 0x8f, 0x6a, 0xab, 0x55, 0x63, 0x73, 0x75, 0x7d,
	0xad, 0x5a, 0xa9, 0x3d, 0xa8, 0x55, 0x97, 0xd2, 0x27, 0xf0, 0x19, 0x98, 0x2e, 0x3d, 0x29, 0xd5,
	0x96, 0x4b, 0xe5, 0xe5, 0x6a, 0x1a, 0xe1, 0x14, 0x4c, 0x2e, 0x55, 0x97, 0xab, 0x1b, 0xd5, 0xa5,
	0xf4, 0x18, 0x3e, 0x0d, 0x53, 0x15, 0xbd, 0x5a, 0xda, 0xa8, 0xad, 0x3e, 0x4c, 0xa7, 0xc5, 0x4c,
	0x9a, 0xc4, 0x6c, 0x46, 0x38, 0x96, 0xeb, 0x75, 0x39, 0xc9, 0x89, 0x20, 0x7a, 0xb5, 0x3b, 0xbd,
	0x22, 0x3c, 0xd7, 0x37, 0xea, 0x6b, 0x6b, 0x62, 0xa6, 0xaa, 0x6d, 0xc8, 0x56, 0x3c, 0x4a, 0x7c,
	0xda, 0x8b, 0x4f, 0xa7, 0x5f, 0x04, 0x94, 0xfb, 0x78, 0x15, 0xce, 0xf5, 0xf5, 0x44, 0x99, 0x95,
	0x54, 0xf1, 0x5a, 0xa2, 0x6a, 0xd2, 0xcf, 0x76, 0x7a, 0xe6, 0xea, 0x02, 0x64, 0x96, 0x2d, 0xee,
	0xf7, 0x7a, 0xf1, 0xee, 0x69, 0x07, 0xba, 0x0f, 0xea, 0xe9, 0x3e, 0x2a, 0x83, 0xec, 0xd0, 0x7d,
	0xdc, 0x65, 0x0e, 0xa7, 0x78, 0x0d, 0xd2, 0x7d, 0x30, 0xb9, 0x82, 0x64, 0xd5, 0x27, 0xc4, 0x79,
	0xae, 0x17, 0x27, 0x57, 0x1f, 0x81, 0xf2, 0x90, 0xfa, 0xc3, 0x93, 0x72, 0xa8, 0xc6, 0xa9, 0xfe,
	0x84, 0x20, 0xbb, 0xe9, 0x6e, 0xbd, 0xa9, 0x14, 0xe3, 0x7b, 0x90, 0x0a, 0xe4, 0x71, 0x52, 0x4e,
	0x24, 0x9a, 0x54, 0x31, 0x53, 0x08, 0x15, 0x67, 0xbf, 0x09, 0x3e, 0x10, 0x8a, 0xb3, 0x42, 0xf8,
	0x8e, 0x0e, 0xa1, 0xbb, 0x18, 0xab, 0x8f, 0x21, 0xbb, 0x44, 0x6d, 0x1a, 0x87, 0xf5, 0x70, 0xcc,
	0x6b, 0x70, 0xb1, 0xcc, 0xd8, 0x6b, 0x49, 0xa2, 0x01, 0x59, 0x9d, 0x36, 0x5e, 0x4f, 0x30, 0xe1,
	0xdd, 0x22, 0xde, 0x96, 0x32, 0x2e, 0x9b, 0x98, 0x1c, 0xab, 0x04, 0x2e, 0xad, 0xb7, 0x02, 0x7f,
	0x8b, 0x3d, 0x73, 0xfe, 0xab, 0x23, 0xca, 0x80, 0xeb, 0x2e, 0x75, 0x2a, 0xcc, 0xe1, 0xcc, 0x3e,
	0x62, 0x1e, 0x16, 0x60, 0xb6, 0x27, 0x46, 0x54, 0xff, 0x97, 0x21, 0x65, 0x86, 0x4b, 0x46, 0xe0,
	0xd9, 0x51, 0x2c, 0x88, 0x96, 0x36, 0x3d, 0x5b, 0xdd, 0x80, 0xab, 0x15, 0xe2, 0x98, 0xd4, 0xee,
	0x25, 0xb7, 0xaf, 0x84, 0x47, 0x42, 0xd3, 0x81, 0x77, 0x2a, 0x2d, 0xe2, 0x34, 0xfb, 0xab, 0x25,
	0xd4, 0x84, 0x50, 0x0d, 0x8f, 0x94, 0xbe, 0x5e, 0xb1, 0x19, 0xef, 0x13, 0x9b, 0xe2, 0xdf, 0x33,
	0x70, 0xbe, 0xaf, 0x9f, 0x52, 0xaf, 0x63, 0x99, 0x14, 0xff, 0x8e, 0x60, 0x6e, 0x58, 0x3f, 0xc3,
	0xc5, 0x98, 0x8f, 0x69, 0x44, 0xf3, 0xcb, 0x24, 0xfb, 0x00, 0x55, 0xe3, 0xab, 0x3f, 0xfe, 0xfa,
	0x6e, 0xec, 0x53, 0xf5, 0x81, 0x7c, 0x09, 0xf6, 0x3e, 0x28, 0x23, 0x42, 0x5c, 0x7b, 0x3e, 0xe4,
	0x69, 0x29, 0x2c, 0x2f, 0xfa, 0xdf, 0x9c, 0x7c, 0xb1, 0xbf, 0x1d, 0xe0, 0x97, 0x08, 0x66, 0x87,
	0x74, 0x3f, 0x1c, 0xf7, 0x50, 0x8a, 0xef, 0xb0, 0x99, 0xe2, 0x61, 0xb6, 0x84, 0xc5, 0xa5, 0xde,
	0x97, 0xfc, 0xee, 0xe0, 0x85, 0x91, 0xfc, 0x62, 0xf9, 0xe0, 0x9f, 0x11, 0xcc, 0x0c, 0xf4, 0x52,
	0xac, 0xc5, 0x20, 0x89, 0xeb, 0xba, 0x49, 0x6f, 0xa3, 0x2a, 0xd1, 0x7e, 0x84, 0x3f, 0x3c, 0x1a,
	0x5a, 0xed, 0xb9, 0x28, 0xcd, 0x17, 0xf8, 0x1f, 0x04, 0x73, 0xc3, 0xba, 0x76, 0x6c, 0x21, 0x8d,
	0x68, 0xf1, 0x49, 0xa1, 0x77, 0x24, 0x74, 0xb7, 0xf8, 0xf9, 0xeb, 0x29, 0xa4, 0x41, 0x57, 0x49,
	0x6d, 0xb0, 0xbe, 0x7e, 0x44, 0x30, 0x37, 0xac, 0xeb, 0xc7, 0x72, 0x1d, 0x21, 0x11, 0x99, 0x0b,
	0x03, 0x4a, 0x53, 0x15, 0xff, 0xf8, 0x74, 0xef, 0x65, 0xfe, 0x98, 0xf7, 0xf2, 0x12, 0x01, 0x1e,
	0x14, 0x15, 0x7c, 0x33, 0x06, 0x69, 0xac, 0xfe, 0x24, 0xbd, 0x93, 0x15, 0x09, 0xfb, 0xa1, 0x5a,
	0x3e, 0x16, 0xec, 0x45, 0x21, 0x5d, 0x8b, 0x68, 0x1e, 0xff, 0x8a, 0x60, 0x6e, 0x98, 0x90, 0xc5,
	0xa6, 0x7a, 0x84, 0xea, 0x25, 0xa5, 0x50, 0x97, 0x14, 0x6a, 0xea, 0xd2, 0xf1, 0x28, 0x78, 0xb4,
	0x4b, 0xe2, 0x37, 0x04, 0x17, 0x86, 0x8b, 0x25, 0xbe, 0x1d, 0x03, 0x69, 0xa4, 0xb6, 0x26, 0x25,
	0xf2, 0xb1, 0x24, 0xf2, 0xf8, 0x15, 0x8d, 0xf6, 0x95, 0x44, 0x78, 0x84, 0x45, 0x50, 0xf9, 0x13,
	0xc1, 0xa5, 0x91, 0xc2, 0x88, 0xef, 0xc5, 0x09, 0x47, 0x02, 0x39, 0x7d, 0xc3, 0x37, 0x64, 0x4a,
	0x48, 0x82, 0xd6, 0x2f, 0x08, 0x2e, 0x8a, 0x77, 0x42, 0xef, 0x39, 0xd1, 0xab, 0x01, 0x5f, 0x8f,
	0x41, 0x35, 0xf8, 0x3a, 0xc9, 0xcc, 0x27, 0x71, 0x8d, 0x74, 0x22, 0xfa, 0x54, 0x70, 0xf5, 0x98,
	0x2c, 0x22, 0x94, 0x3e, 0xfc, 0x7f, 0xcd, 0x63, 0x2e, 0xe3, 0x34, 0xee, 0x6a, 0xae, 0x0f, 0xfe,
	0x6b, 0x1f, 0xed, 0x38, 0xea, 0x45, 0x9c, 0xc0, 0xdf, 0x20, 0xc8, 0xbd, 0xea, 0x4d, 0x83, 0xef,
	0xc7, 0xd5, 0x44, 0xb2, 0xc7, 0x50, 0x62, 0x34, 0xe5, 0xaf, 0xd1, 0xb7, 0x25, 0x82, 0xef, 0xc0,
	0x64, 0xe4, 0xaf, 0xde, 0xd8, 0x1b, 0x62, 0xb5, 0xe5, 0xfb, 0x2e, 0x5f, 0xd4, 0xb4, 0xa6, 0xe5,
	0xb7, 0x82, 0x46, 0xc1, 0x64, 0x6d, 0xad, 0xfb, 0x33, 0x50, 0xf4, 0x77, 0x1e, 0x8d, 0x15, 0xd3,
	0xc4, 0x75, 0x6d, 0xcb, 0x94, 0xd9, 0xd0, 0x9e, 0x72, 0xe6, 0x2c, 0x0e, 0xac, 0x7c, 0x76, 0x55,
	0xf8, 0x17, 0x88, 0xa9, 0x0d, 0xfd, 0x55, 0xec, 0x9e, 0x2b, 0xa7, 0x8d, 0x53, 0x32, 0xcb, 0xef,
	0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x11, 0xab, 0x7b, 0xeb, 0x3c, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VirtualMachineServiceClient is the client API for VirtualMachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtualMachineServiceClient interface {
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	CreateVirtualMachine(ctx context.Context, in *CreateVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:read
	//   - project: *
	//     role: n0stack:virtual_machine:read
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ListVirtualMachines(ctx context.Context, in *ListVirtualMachinesRequest, opts ...grpc.CallOption) (*ListVirtualMachinesResponse, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:read
	//   - project: *
	//     role: n0stack:virtual_machine:read
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	GetVirtualMachine(ctx context.Context, in *GetVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	UpdateVirtualMachine(ctx context.Context, in *UpdateVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	DeleteVirtualMachine(ctx context.Context, in *DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	BootVirtualMachine(ctx context.Context, in *BootVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	RebootVirtualMachine(ctx context.Context, in *RebootVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ShutdownVirtualMachine(ctx context.Context, in *ShutdownVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	CancelVirtualMachineOperation(ctx context.Context, in *CancelVirtualMachineOperationRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary: OpenVirtualMachineConsole returns a URL to open the console of the virtual machine.
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:read
	//   - project: *
	//     role: n0stack:virtual_machine:read
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	OpenVirtualMachineConsole(ctx context.Context, in *OpenConsoleRequest, opts ...grpc.CallOption) (*OpenConsoleResponse, error)
	// summary: Propose*Operation propose the resource operation
	// description:|
	//   You can propose the resource operation if the resource state is unsteady.
	//   The API ensures that only one operator is operating using lock with operating_for_seconds.
	//   If the operation is failed, set failed backoff to operating_for_seconds.
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:operate
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ProposeVirtualMachineOperation(ctx context.Context, in *protobuf.ProposeOperationRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	// summary: ChangeVirtualMachineRunningState change the is_running parameter of the virtual machine
	// description:|
	//   Set the is_running parameter to true if the virtual machine is running.
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:operate
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ChangeVirtualMachineRunningState(ctx context.Context, in *ChangeVirtualMachineRunningStateRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
}

type virtualMachineServiceClient struct {
	cc *grpc.ClientConn
}

func NewVirtualMachineServiceClient(cc *grpc.ClientConn) VirtualMachineServiceClient {
	return &virtualMachineServiceClient{cc}
}

func (c *virtualMachineServiceClient) CreateVirtualMachine(ctx context.Context, in *CreateVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ListVirtualMachines(ctx context.Context, in *ListVirtualMachinesRequest, opts ...grpc.CallOption) (*ListVirtualMachinesResponse, error) {
	out := new(ListVirtualMachinesResponse)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/ListVirtualMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) GetVirtualMachine(ctx context.Context, in *GetVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/GetVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) UpdateVirtualMachine(ctx context.Context, in *UpdateVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/UpdateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) DeleteVirtualMachine(ctx context.Context, in *DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) BootVirtualMachine(ctx context.Context, in *BootVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/BootVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) RebootVirtualMachine(ctx context.Context, in *RebootVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/RebootVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ShutdownVirtualMachine(ctx context.Context, in *ShutdownVirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/ShutdownVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) CancelVirtualMachineOperation(ctx context.Context, in *CancelVirtualMachineOperationRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/CancelVirtualMachineOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) OpenVirtualMachineConsole(ctx context.Context, in *OpenConsoleRequest, opts ...grpc.CallOption) (*OpenConsoleResponse, error) {
	out := new(OpenConsoleResponse)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/OpenVirtualMachineConsole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ProposeVirtualMachineOperation(ctx context.Context, in *protobuf.ProposeOperationRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/ProposeVirtualMachineOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ChangeVirtualMachineRunningState(ctx context.Context, in *ChangeVirtualMachineRunningStateRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/n0stack.infra.v1alpha.VirtualMachineService/ChangeVirtualMachineRunningState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineServiceServer is the server API for VirtualMachineService service.
type VirtualMachineServiceServer interface {
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	CreateVirtualMachine(context.Context, *CreateVirtualMachineRequest) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:read
	//   - project: *
	//     role: n0stack:virtual_machine:read
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ListVirtualMachines(context.Context, *ListVirtualMachinesRequest) (*ListVirtualMachinesResponse, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:read
	//   - project: *
	//     role: n0stack:virtual_machine:read
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	GetVirtualMachine(context.Context, *GetVirtualMachineRequest) (*VirtualMachine, error)
	UpdateVirtualMachine(context.Context, *UpdateVirtualMachineRequest) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	DeleteVirtualMachine(context.Context, *DeleteVirtualMachineRequest) (*empty.Empty, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	BootVirtualMachine(context.Context, *BootVirtualMachineRequest) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	RebootVirtualMachine(context.Context, *RebootVirtualMachineRequest) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ShutdownVirtualMachine(context.Context, *ShutdownVirtualMachineRequest) (*VirtualMachine, error)
	// summary:
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:write
	//   - project: *
	//     role: n0stack:virtual_machine:write
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	CancelVirtualMachineOperation(context.Context, *CancelVirtualMachineOperationRequest) (*VirtualMachine, error)
	// summary: OpenVirtualMachineConsole returns a URL to open the console of the virtual machine.
	// description:
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:read
	//   - project: *
	//     role: n0stack:virtual_machine:read
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	OpenVirtualMachineConsole(context.Context, *OpenConsoleRequest) (*OpenConsoleResponse, error)
	// summary: Propose*Operation propose the resource operation
	// description:|
	//   You can propose the resource operation if the resource state is unsteady.
	//   The API ensures that only one operator is operating using lock with operating_for_seconds.
	//   If the operation is failed, set failed backoff to operating_for_seconds.
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:operate
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ProposeVirtualMachineOperation(context.Context, *protobuf.ProposeOperationRequest) (*VirtualMachine, error)
	// summary: ChangeVirtualMachineRunningState change the is_running parameter of the virtual machine
	// description:|
	//   Set the is_running parameter to true if the virtual machine is running.
	// required_roles:
	//   - project: n0stack
	//     role: virtual_machine:operate
	// errors:
	//   NotFound: Return if the virtual machine resource is not found
	ChangeVirtualMachineRunningState(context.Context, *ChangeVirtualMachineRunningStateRequest) (*VirtualMachine, error)
}

// UnimplementedVirtualMachineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtualMachineServiceServer struct {
}

func (*UnimplementedVirtualMachineServiceServer) CreateVirtualMachine(ctx context.Context, req *CreateVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) ListVirtualMachines(ctx context.Context, req *ListVirtualMachinesRequest) (*ListVirtualMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachines not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) GetVirtualMachine(ctx context.Context, req *GetVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) UpdateVirtualMachine(ctx context.Context, req *UpdateVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) DeleteVirtualMachine(ctx context.Context, req *DeleteVirtualMachineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) BootVirtualMachine(ctx context.Context, req *BootVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) RebootVirtualMachine(ctx context.Context, req *RebootVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) ShutdownVirtualMachine(ctx context.Context, req *ShutdownVirtualMachineRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVirtualMachine not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) CancelVirtualMachineOperation(ctx context.Context, req *CancelVirtualMachineOperationRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelVirtualMachineOperation not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) OpenVirtualMachineConsole(ctx context.Context, req *OpenConsoleRequest) (*OpenConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenVirtualMachineConsole not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) ProposeVirtualMachineOperation(ctx context.Context, req *protobuf.ProposeOperationRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeVirtualMachineOperation not implemented")
}
func (*UnimplementedVirtualMachineServiceServer) ChangeVirtualMachineRunningState(ctx context.Context, req *ChangeVirtualMachineRunningStateRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVirtualMachineRunningState not implemented")
}

func RegisterVirtualMachineServiceServer(s *grpc.Server, srv VirtualMachineServiceServer) {
	s.RegisterService(&_VirtualMachineService_serviceDesc, srv)
}

func _VirtualMachineService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).CreateVirtualMachine(ctx, req.(*CreateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ListVirtualMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ListVirtualMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/ListVirtualMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ListVirtualMachines(ctx, req.(*ListVirtualMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_GetVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).GetVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/GetVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).GetVirtualMachine(ctx, req.(*GetVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_UpdateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).UpdateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/UpdateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).UpdateVirtualMachine(ctx, req.(*UpdateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).DeleteVirtualMachine(ctx, req.(*DeleteVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_BootVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).BootVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/BootVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).BootVirtualMachine(ctx, req.(*BootVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_RebootVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).RebootVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/RebootVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).RebootVirtualMachine(ctx, req.(*RebootVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ShutdownVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ShutdownVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/ShutdownVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ShutdownVirtualMachine(ctx, req.(*ShutdownVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_CancelVirtualMachineOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelVirtualMachineOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).CancelVirtualMachineOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/CancelVirtualMachineOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).CancelVirtualMachineOperation(ctx, req.(*CancelVirtualMachineOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_OpenVirtualMachineConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).OpenVirtualMachineConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/OpenVirtualMachineConsole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).OpenVirtualMachineConsole(ctx, req.(*OpenConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ProposeVirtualMachineOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.ProposeOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ProposeVirtualMachineOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/ProposeVirtualMachineOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ProposeVirtualMachineOperation(ctx, req.(*protobuf.ProposeOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ChangeVirtualMachineRunningState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVirtualMachineRunningStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ChangeVirtualMachineRunningState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/n0stack.infra.v1alpha.VirtualMachineService/ChangeVirtualMachineRunningState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ChangeVirtualMachineRunningState(ctx, req.(*ChangeVirtualMachineRunningStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtualMachineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "n0stack.infra.v1alpha.VirtualMachineService",
	HandlerType: (*VirtualMachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _VirtualMachineService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachines",
			Handler:    _VirtualMachineService_ListVirtualMachines_Handler,
		},
		{
			MethodName: "GetVirtualMachine",
			Handler:    _VirtualMachineService_GetVirtualMachine_Handler,
		},
		{
			MethodName: "UpdateVirtualMachine",
			Handler:    _VirtualMachineService_UpdateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _VirtualMachineService_DeleteVirtualMachine_Handler,
		},
		{
			MethodName: "BootVirtualMachine",
			Handler:    _VirtualMachineService_BootVirtualMachine_Handler,
		},
		{
			MethodName: "RebootVirtualMachine",
			Handler:    _VirtualMachineService_RebootVirtualMachine_Handler,
		},
		{
			MethodName: "ShutdownVirtualMachine",
			Handler:    _VirtualMachineService_ShutdownVirtualMachine_Handler,
		},
		{
			MethodName: "CancelVirtualMachineOperation",
			Handler:    _VirtualMachineService_CancelVirtualMachineOperation_Handler,
		},
		{
			MethodName: "OpenVirtualMachineConsole",
			Handler:    _VirtualMachineService_OpenVirtualMachineConsole_Handler,
		},
		{
			MethodName: "ProposeVirtualMachineOperation",
			Handler:    _VirtualMachineService_ProposeVirtualMachineOperation_Handler,
		},
		{
			MethodName: "ChangeVirtualMachineRunningState",
			Handler:    _VirtualMachineService_ChangeVirtualMachineRunningState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n0stack/infra/v1alpha/virtual_machine.proto",
}
