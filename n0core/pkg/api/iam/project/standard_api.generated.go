// Code generated by "standard_api"; DO NOT EDIT.

package project

import (
	"context"

	"github.com/golang/protobuf/proto"
	"n0st.ac/n0stack/n0core/pkg/datastore"
	grpcutil "n0st.ac/n0stack/n0core/pkg/util/grpc"
	piam "n0st.ac/n0stack/n0proto.go/iam/v1alpha"
	"google.golang.org/grpc/codes"
)

func GetProject(ctx context.Context, ds datastore.Datastore, name string) (*piam.Project, int64, error) {
	resourse := &piam.Project{}
	version, err := ds.Get(ctx, name, resourse)
	if err != nil {
		if datastore.IsNotFound(err) {
			return nil, 0, grpcutil.Errorf(codes.NotFound, err.Error())
		}

		return nil, 0, grpcutil.Errorf(codes.Internal, "failed to get User %s from db: err='%s'", name, err.Error())
	}

	return resourse, version, nil
}

func DeleteProject(ctx context.Context, ds datastore.Datastore, name string, version int64) error {
	if err := ds.Delete(ctx, name, version); err != nil {
		return grpcutil.Errorf(codes.Internal, "failed to delete Project %s from db: err='%s'", name, err.Error())
	}

	return nil
}

func ApplyProject(ctx context.Context, ds datastore.Datastore, resource *piam.Project, version int64) (int64, error) {
	version, err := ds.Apply(ctx, resource.Name, resource, version)
	if err != nil {
		return 0, grpcutil.Errorf(codes.Internal, "failed to apply Project %s to db: err='%s'", resource.Name, err.Error())
	}

	return version, nil
}

func ListProjects(ctx context.Context, req *piam.ListProjectsRequest, ds datastore.Datastore) (*piam.ListProjectsResponse, error) {
	res := &piam.ListProjectsResponse{}
	f := func(s int) []proto.Message {
		res.Projects = make([]*piam.Project, s)
		for i := range res.Projects {
			res.Projects[i] = &piam.Project{}
		}

		m := make([]proto.Message, s)
		for i, v := range res.Projects {
			m[i] = v
		}

		return m
	}

	if err := ds.List(ctx, f); err != nil {
		return nil, grpcutil.Errorf(codes.Internal, "Failed to list from db, please retry or contact for the administrator of this cluster")
	}
	if len(res.Projects) == 0 {
		return nil, grpcutil.Errorf(codes.NotFound, "")
	}

	return res, nil
}
