// Code generated by "standard_api"; DO NOT EDIT.

package user

import (
	"context"

	"google.golang.org/grpc/codes"
	piam "n0st.ac/n0stack/iam/v1alpha"
	"n0st.ac/n0stack/n0core/pkg/datastore"
	grpcutil "n0st.ac/n0stack/n0core/pkg/util/grpc"
)

func GetUser(ctx context.Context, ds datastore.Datastore, name string) (*piam.User, int64, error) {
	resourse := &piam.User{}
	version, err := ds.Get(ctx, name, resourse)
	if err != nil {
		if datastore.IsNotFound(err) {
			return nil, 0, grpcutil.Errorf(codes.NotFound, err.Error())
		}

		return nil, 0, grpcutil.Errorf(codes.Internal, "failed to get User %!s(MISSING) from db: err='%!s(MISSING)'", name, err.Error())
	}

	return resourse, version, nil
}

func DeleteUser(ctx context.Context, ds datastore.Datastore, name string, version int64) error {
	if err := ds.Delete(ctx, name, version); err != nil {
		return grpcutil.Errorf(codes.Internal, "failed to delete User %s from db: err='%s'", name, err.Error())
	}

	return nil
}

func ApplyUser(ctx context.Context, ds datastore.Datastore, resource *piam.User, version int64) (int64, error) {
	version, err := ds.Apply(ctx, resource.Name, resource, version)
	if err != nil {
		return 0, grpcutil.Errorf(codes.Internal, "failed to apply User %s to db: err='%s'", resource.Name, err.Error())
	}

	return version, nil
}
